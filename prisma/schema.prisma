// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  companyId      String?
  role           Role      @default(USER)
  name           String
  image          String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  sessions       Session[]
  accounts       Account[]

  company        Company?  @relation(fields: [companyId], references: [id])

  surveys Survey[]
  answers Answer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id                 String     @id @default(cuid())
  userId             String
  createdAt          DateTime   @default(now())
  title              String
  isActive           Boolean
  description        String?
  questions          Question[]
  answers            Answer[]
  oneQuestionPerStep Boolean
  displayTitle       Boolean
  hideProgressBar    Boolean?
  accentColor        String?
  displayLogo       Boolean? @default(true)
  showDisclaimer    Boolean   @default(false)
  disclaimerTitle   String?   @db.Text
  disclaimerBody    String?   @db.Text
  thankYouLogic     Json?
  associatedCompanies Json? // Store company IDs that can access this survey

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id          String       @id @default(cuid())
  surveyId    String
  createdAt   DateTime     @default(now())
  title       String
  description String?
  type        QuestionType
  isRequired  Boolean
  options     Json
  order       Int
  logicPaths  Json?

  survey Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Answer {
  id        String   @id @default(cuid())
  userId    String?
  companyId String?  // Track which company this answer belongs to
  createdAt DateTime @default(now())
  surveyId  String

  answerData AnswerData[]

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  survey  Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model AnswerData {
  id             String  @id @default(cuid())
  answerId       String
  questionId     String
  providedAnswer String? @db.Text

  answer Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
}

model Company {
  id        String   @id @default(cuid()) // ganti ke Int + autoincrement() jika perlu
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  users   User[]
  answers Answer[]
}

enum QuestionType {
  EMOJI
  INPUT
  CHOICE
  RATE
  SECTION
  SECTION_BREAKER
  NUMBER
  DATE
  TEXTAREA
  COMPANY
}

enum ComparisonType {
  EQUAL
  GREATER_THAN
  LESS_THAN
  SUBMITTED
}

enum Role {
  USER
  ADMIN
}
